{"ast":null,"code":"var _jsxFileName = \"D:\\\\TodoProject\\\\client\\\\src\\\\Note.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { deleteFromDb } from './api/DeleteToDO';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { useQuery } from '@tanstack/react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Note(props) {\n  _s();\n  function handleClick(item) {}\n  const queryClient = useQueryClient();\n  const addTodoDeletion = useMutation({\n    mutationFn: deleteFromDb,\n    // When mutate is called:\n    onMutate: async id => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries(['todos']);\n\n      // Snapshot the previous value\n      const previousTasks = queryClient.getQueryData(['todos']);\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(['todos'], old => old === null || old === void 0 ? void 0 : old.filter(t => t.id !== id));\n\n      // Return a context object with the snapshotted value\n      return {\n        previousTasks\n      };\n    },\n    // If the mutation fails, use the context returned from onMutate to roll back\n    onError: (err, _ref, context) => {\n      let {\n        id\n      } = _ref;\n      queryClient.setQueryData(['todos'], context.previousTasks);\n    },\n    // Always refetch after error or success:\n    onSettled: (newData, error, _ref2) => {\n      let {\n        id\n      } = _ref2;\n      queryClient.invalidateQueries(['todos']);\n    }\n  });\n\n  // const addTodoDeletion = useMutation({\n  //   mutationFn:  deleteFromDb,\n  //   onMutate: async (id) => {\n  //    await queryClient.cancelQueries({ queryKey: ['todos'] })\n  //    const previousTodos = queryClient.getQueryData(['todos'])\n  //   queryClient.setQueryData(['todos'], (old) =>old.filter((t) => t.id !== id) )\n  //   return { previousTodos }\n  // }})\n\n  // const addTodoDeletion = useMutation(\n  //   (id) => fetch(`http://localhost:8000/${id}`, { method: 'DELETE' }),\n  //   {\n  //     onSuccess: () => {\n  //       queryClient.invalidateQueries('todos');\n  //     },\n  //     optimisticUpdater: (cache, id) => {\n  //       cache.setQueryData('todos', (oldTodos) => {\n  //         return oldTodos.filter((todo) => todo.id !== id);\n  //       });\n  //     },\n  //   }\n  // );\n  const {\n    data: todos\n  } = useQuery(['todos'], () => {\n    return axios.get(\"http://localhost:8000\").then(res => res.data);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [props.note.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => {\n            handleClick(item);\n          },\n          children: item.title\n        }, item._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 16\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        addTodoDeletion.mutate(props.id);\n      },\n      children: \"DELETE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(Note, \"JRfLcRpO7GVLzUMq3KfwJbKQX6A=\", false, function () {\n  return [useQueryClient, useMutation, useQuery];\n});\n_c = Note;\nexport default Note;\nvar _c;\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["React","deleteFromDb","useMutation","useQueryClient","axios","useQuery","jsxDEV","_jsxDEV","Note","props","_s","handleClick","item","queryClient","addTodoDeletion","mutationFn","onMutate","id","cancelQueries","previousTasks","getQueryData","setQueryData","old","filter","t","onError","err","_ref","context","onSettled","newData","error","_ref2","invalidateQueries","data","todos","get","then","res","className","children","note","map","onClick","title","_id","fileName","_jsxFileName","lineNumber","columnNumber","mutate","_c","$RefreshReg$"],"sources":["D:/TodoProject/client/src/Note.js"],"sourcesContent":["import React from \"react\";\r\nimport {deleteFromDb} from './api/DeleteToDO';\r\nimport {useMutation,useQueryClient}  from '@tanstack/react-query';\r\nimport axios from 'axios';\r\nimport { useQuery}  from '@tanstack/react-query';\r\nfunction Note(props) {\r\n\r\n  function handleClick(item) {}\r\n \r\n  const queryClient = useQueryClient();\r\n  \r\nconst addTodoDeletion =  useMutation({  \r\n   mutationFn:  deleteFromDb, \r\n  // When mutate is called:\r\n  onMutate: async (id) => {\r\n    // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\r\n    await queryClient.cancelQueries(['todos'])\r\n\r\n    // Snapshot the previous value\r\n    const previousTasks = queryClient.getQueryData(['todos'])\r\n\r\n    // Optimistically update to the new value\r\n    queryClient.setQueryData(['todos'], old => old?.filter((t) => t.id !== id))\r\n\r\n    // Return a context object with the snapshotted value\r\n    return { previousTasks }\r\n  },\r\n  // If the mutation fails, use the context returned from onMutate to roll back\r\n  onError: (err, { id }, context) => {\r\n    queryClient.setQueryData(['todos'], context.previousTasks)\r\n  },\r\n  // Always refetch after error or success:\r\n  onSettled: (newData, error, { id }) => {\r\n    queryClient.invalidateQueries(['todos'])\r\n  },\r\n})\r\n\r\n// const addTodoDeletion = useMutation({\r\n//   mutationFn:  deleteFromDb,\r\n//   onMutate: async (id) => {\r\n//    await queryClient.cancelQueries({ queryKey: ['todos'] })\r\n//    const previousTodos = queryClient.getQueryData(['todos'])\r\n//   queryClient.setQueryData(['todos'], (old) =>old.filter((t) => t.id !== id) )\r\n//   return { previousTodos }\r\n// }})\r\n\r\n\r\n// const addTodoDeletion = useMutation(\r\n//   (id) => fetch(`http://localhost:8000/${id}`, { method: 'DELETE' }),\r\n//   {\r\n//     onSuccess: () => {\r\n//       queryClient.invalidateQueries('todos');\r\n//     },\r\n//     optimisticUpdater: (cache, id) => {\r\n//       cache.setQueryData('todos', (oldTodos) => {\r\n//         return oldTodos.filter((todo) => todo.id !== id);\r\n//       });\r\n//     },\r\n//   }\r\n// );\r\nconst { data: todos } = useQuery(['todos'], () => {\r\n  return axios.get(\"http://localhost:8000\").then((res) => res.data);\r\n});\r\n  return (\r\n    <div className=\"note\">\r\n      {  props.note.map((item) => {\r\n        return <ul> <li onClick={() => {handleClick(item)}} key={item._id}>{item.title}</li></ul>\r\n      })}\r\n      <button onClick={() => {addTodoDeletion.mutate(props.id)}}>DELETE</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Note;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}