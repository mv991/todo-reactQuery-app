{"ast":null,"code":"var _jsxFileName = \"D:\\\\TodoProject\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport Note from \"./Note\";\nimport ModalComponent from \"./ModalComponent\";\nimport { useQuery } from '@tanstack/react-query';\nimport { postToDb } from './api/CreateToDo';\nimport { deleteFromDb } from './api/DeleteToDO';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    isLoading,\n    error,\n    data,\n    isFetching\n  } = useQuery({\n    queryKey: ['todos'],\n    queryFn: () => axios.get(\"http://localhost:8000\").then(res => res.data)\n  });\n  if (isLoading) {\n    return 'Loading...';\n  }\n  if (error) return 'An error has occurred: ' + error.message;\n  const addTodoMutation = useMutation({\n    mutationFn: postToDb,\n    onMutate: async newTodo => {\n      console.log(newTodo, \"newTodo\");\n      // Cancel any outgoing refetches\n      // (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries({\n        queryKey: ['todos']\n      });\n      // Snapshot the previous value\n      const previousTodos = queryClient.getQueryData(['todos']);\n\n      // Optimistically update to the new value\n      queryClient.setQueryData(['todos'], old => [...old, {\n        ...newTodo\n      }]);\n\n      // Return a context object with the snapshotted value\n      return {\n        previousTodos\n      };\n    },\n    // If the mutation fails,\n    // use the context returned from onMutate to roll back\n    onError: (err, newTodo, context) => {\n      queryClient.setQueryData(['todos'], context.previousTodos);\n    },\n    // Always refetch after error or success:\n    onSettled: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['todos']\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [console.log(\"RAN\", data), /*#__PURE__*/_jsxDEV(ModalComponent, {\n      addToDos: postToDb,\n      addTodoMutation: addTodoMutation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }, this), data.map(noteItem => {\n      return /*#__PURE__*/_jsxDEV(Note, {\n        note: noteItem.todos,\n        onDelete: deleteFromDb,\n        id: noteItem._id\n      }, noteItem._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 1\n  }, this);\n}\n_s(App, \"ndRh6yvxjoAVW9isoAamjqzyXLU=\", false, function () {\n  return [useQueryClient, useQuery, useMutation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Note","ModalComponent","useQuery","postToDb","deleteFromDb","useMutation","useQueryClient","axios","jsxDEV","_jsxDEV","App","_s","queryClient","isLoading","error","data","isFetching","queryKey","queryFn","get","then","res","message","addTodoMutation","mutationFn","onMutate","newTodo","console","log","cancelQueries","previousTodos","getQueryData","setQueryData","old","onError","err","context","onSettled","invalidateQueries","className","children","addToDos","fileName","_jsxFileName","lineNumber","columnNumber","map","noteItem","note","todos","onDelete","id","_id","_c","$RefreshReg$"],"sources":["D:/TodoProject/client/src/App.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from'react';\nimport Note from \"./Note\";\nimport ModalComponent from \"./ModalComponent\";\nimport { useQuery}  from '@tanstack/react-query';\nimport {postToDb } from './api/CreateToDo';\nimport { deleteFromDb } from './api/DeleteToDO';\nimport {useMutation,useQueryClient}  from '@tanstack/react-query';\nimport axios from 'axios';\n\nfunction App() { \n  const queryClient = useQueryClient();\n  const { isLoading, error, data, isFetching } = useQuery({\n    queryKey: ['todos'],\n    queryFn: () =>\n      axios\n        .get(\"http://localhost:8000\")\n        .then((res) => res.data),\n  });\n  if (isLoading) {return 'Loading...'}\n\n  if (error) return 'An error has occurred: ' + error.message\n\n  const addTodoMutation = useMutation({\n    mutationFn:  postToDb,\n    onMutate: async (newTodo) => {\n      console.log(newTodo,\"newTodo\")\n      // Cancel any outgoing refetches\n      // (so they don't overwrite our optimistic update)\n      await queryClient.cancelQueries({ queryKey: ['todos'] })\n    // Snapshot the previous value\n    const previousTodos = queryClient.getQueryData(['todos'])\n  \n    // Optimistically update to the new value\n    queryClient.setQueryData(['todos'], (old) => [...old, {...newTodo}])\n\n    // Return a context object with the snapshotted value\n    return { previousTodos }\n  },\n  // If the mutation fails,\n  // use the context returned from onMutate to roll back\n  onError: (err, newTodo, context) => {\n    queryClient.setQueryData(['todos'], context.previousTodos)\n  },\n  // Always refetch after error or success:\n  onSettled: () => {\n    queryClient.invalidateQueries({ queryKey: ['todos'] })\n  },\n})\n  \n  return (\n\n<div className=\"App\">\n{console.log(\"RAN\",data)}\n  <ModalComponent addToDos={postToDb} addTodoMutation = {addTodoMutation}/>\n      {\n          data.map((noteItem) => {\n          return <Note note = {noteItem.todos} onDelete = {deleteFromDb} key={noteItem._id} id={noteItem._id}/>\n            \n      \n\n       \n      })}\n</div>\n  );\n\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}