{"ast":null,"code":"var _jsxFileName = \"D:\\\\TodoProject\\\\client\\\\src\\\\Note.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { deleteFromDb } from './api/DeleteToDO';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Note(props) {\n  _s();\n  function handleClick(item) {}\n  const queryClient = useQueryClient();\n\n  //   const addTodoDeletion = useMutation({\n  //     mutationFn:  deleteFromDb,\n  //     onMutate: async (id) => {\n  //       console.log(\"id\",id)\n  //      await queryClient.cancelQueries({ queryKey: ['todos',id] })\n  //      const previousTodos = queryClient.getQueryData(['todos',id])\n  //     queryClient.setQueryData(['todos',id], old=> old.filter((t) => t.id!==id));\n  //     return { previousTodos }\n  //   },\n\n  //   // If the mutation fails,  \n  //   // use the context returned from onMutate to roll back\n  //   onError: (err, {id}, context) => {\n  //     queryClient.setQueryData(['todos',id], context.previousTodos)\n  //   },\n  //   // Always refetch after error or success:\n  //   onSettled: ({id}) => {\n  //     queryClient.invalidateQueries({ queryKey: ['todos',id] })\n  //   },\n  // })\n  // const addTodoDeletion =  useMutation({  \n  //    mutationFn:  deleteFromDb, \n  //   // When mutate is called:\n  //   onMutate: async (id) => {\n  //     // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n  //     await queryClient.cancelQueries(['tasks', id])\n\n  //     // Snapshot the previous value\n  //     const previousTasks = queryClient.getQueryData(['tasks', id])\n\n  //     // Optimistically update to the new value\n  //     queryClient.setQueryData(['tasks', id], old => old?.filter((t) => t.id !== id))\n\n  //     // Return a context object with the snapshotted value\n  //     return { previousTasks }\n  //   },\n  //   // If the mutation fails, use the context returned from onMutate to roll back\n  //   onError: (err, { id }, context) => {\n  //     queryClient.setQueryData(['tasks', id], context.previousTasks)\n  //   },\n  //   // Always refetch after error or success:\n  //   onSettled: (newData, error, { id }) => {\n  //     queryClient.invalidateQueries(['tasks', id])\n  //   },\n  // })\n  const addTodoDeletion = useMutation({\n    mutationFn: deletePost,\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['todos']\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [props.note.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => {\n            handleClick(item);\n          },\n          children: item.title\n        }, item._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 16\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        addTodoDeletion.mutate(props.id);\n      },\n      children: \"DELETE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(Note, \"dXKpuMkaVREVDpYZUFzM+SnQNPk=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = Note;\nexport default Note;\nvar _c;\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["React","deleteFromDb","useMutation","useQueryClient","jsxDEV","_jsxDEV","Note","props","_s","handleClick","item","queryClient","addTodoDeletion","mutationFn","deletePost","onSuccess","invalidateQueries","queryKey","className","children","note","map","onClick","title","_id","fileName","_jsxFileName","lineNumber","columnNumber","mutate","id","_c","$RefreshReg$"],"sources":["D:/TodoProject/client/src/Note.js"],"sourcesContent":["import React from \"react\";\r\nimport {deleteFromDb} from './api/DeleteToDO';\r\nimport {useMutation,useQueryClient}  from '@tanstack/react-query';\r\n\r\nfunction Note(props) {\r\n\r\n  function handleClick(item) {}\r\n \r\n  const queryClient = useQueryClient();\r\n  \r\n//   const addTodoDeletion = useMutation({\r\n//     mutationFn:  deleteFromDb,\r\n//     onMutate: async (id) => {\r\n//       console.log(\"id\",id)\r\n//      await queryClient.cancelQueries({ queryKey: ['todos',id] })\r\n//      const previousTodos = queryClient.getQueryData(['todos',id])\r\n//     queryClient.setQueryData(['todos',id], old=> old.filter((t) => t.id!==id));\r\n//     return { previousTodos }\r\n//   },\r\n\r\n//   // If the mutation fails,  \r\n//   // use the context returned from onMutate to roll back\r\n//   onError: (err, {id}, context) => {\r\n//     queryClient.setQueryData(['todos',id], context.previousTodos)\r\n//   },\r\n//   // Always refetch after error or success:\r\n//   onSettled: ({id}) => {\r\n//     queryClient.invalidateQueries({ queryKey: ['todos',id] })\r\n//   },\r\n// })\r\n// const addTodoDeletion =  useMutation({  \r\n//    mutationFn:  deleteFromDb, \r\n//   // When mutate is called:\r\n//   onMutate: async (id) => {\r\n//     // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\r\n//     await queryClient.cancelQueries(['tasks', id])\r\n\r\n//     // Snapshot the previous value\r\n//     const previousTasks = queryClient.getQueryData(['tasks', id])\r\n\r\n//     // Optimistically update to the new value\r\n//     queryClient.setQueryData(['tasks', id], old => old?.filter((t) => t.id !== id))\r\n\r\n//     // Return a context object with the snapshotted value\r\n//     return { previousTasks }\r\n//   },\r\n//   // If the mutation fails, use the context returned from onMutate to roll back\r\n//   onError: (err, { id }, context) => {\r\n//     queryClient.setQueryData(['tasks', id], context.previousTasks)\r\n//   },\r\n//   // Always refetch after error or success:\r\n//   onSettled: (newData, error, { id }) => {\r\n//     queryClient.invalidateQueries(['tasks', id])\r\n//   },\r\n// })\r\nconst addTodoDeletion = useMutation({\r\n  mutationFn: deletePost,\r\n  onSuccess: () => {\r\n    queryClient.invalidateQueries({ queryKey: ['todos']});\r\n  }\r\n});\r\n\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      {  props.note.map((item) => {\r\n        return <ul> <li onClick={() => {handleClick(item)}} key={item._id}>{item.title}</li></ul>\r\n      })}\r\n      <button onClick={() => {addTodoDeletion.mutate(props.id)}}>DELETE</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Note;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,YAAY,QAAO,kBAAkB;AAC7C,SAAQC,WAAW,EAACC,cAAc,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAEnB,SAASC,WAAWA,CAACC,IAAI,EAAE,CAAC;EAE5B,MAAMC,WAAW,GAAGR,cAAc,EAAE;;EAEtC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMS,eAAe,GAAGV,WAAW,CAAC;IAClCW,UAAU,EAAEC,UAAU;IACtBC,SAAS,EAAEA,CAAA,KAAM;MACfJ,WAAW,CAACK,iBAAiB,CAAC;QAAEC,QAAQ,EAAE,CAAC,OAAO;MAAC,CAAC,CAAC;IACvD;EACF,CAAC,CAAC;EAGA,oBACEZ,OAAA;IAAKa,SAAS,EAAC,MAAM;IAAAC,QAAA,GAChBZ,KAAK,CAACa,IAAI,CAACC,GAAG,CAAEX,IAAI,IAAK;MAC1B,oBAAOL,OAAA;QAAAc,QAAA,GAAI,GAAC,eAAAd,OAAA;UAAIiB,OAAO,EAAEA,CAAA,KAAM;YAACb,WAAW,CAACC,IAAI,CAAC;UAAA,CAAE;UAAAS,QAAA,EAAiBT,IAAI,CAACa;QAAK,GAArBb,IAAI,CAACc,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAmB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAC3F,CAAC,CAAC,eACFvB,OAAA;MAAQiB,OAAO,EAAEA,CAAA,KAAM;QAACV,eAAe,CAACiB,MAAM,CAACtB,KAAK,CAACuB,EAAE,CAAC;MAAA,CAAE;MAAAX,QAAA,EAAC;IAAM;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACtE;AAEV;AAACpB,EAAA,CAnEQF,IAAI;EAAA,QAISH,cAAc,EA+CZD,WAAW;AAAA;AAAA6B,EAAA,GAnD1BzB,IAAI;AAsEb,eAAeA,IAAI;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}