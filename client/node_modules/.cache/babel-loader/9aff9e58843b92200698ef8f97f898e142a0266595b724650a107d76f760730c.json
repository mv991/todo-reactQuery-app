{"ast":null,"code":"var _jsxFileName = \"D:\\\\TodoProject\\\\client\\\\src\\\\Note.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { deleteFromDb } from './api/DeleteToDO';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Note(props) {\n  _s();\n  function handleClick(item) {}\n  const queryClient = useQueryClient();\n\n  // const addTodoDeletion =  useMutation({  \n  //    mutationFn:  deleteFromDb, \n  //   // When mutate is called:\n  //   onMutate: async (id) => {\n  //     // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n  //     await queryClient.cancelQueries(['todos'])\n\n  //     // Snapshot the previous value\n  //     const previousTasks = queryClient.getQueryData(['todos'])\n\n  //     // Optimistically update to the new value\n  //     queryClient.setQueryData(['todos'], old => old?.filter((t) => t.id !== id))\n\n  //     // Return a context object with the snapshotted value\n  //     return { previousTasks }\n  //   },\n  //   // If the mutation fails, use the context returned from onMutate to roll back\n  //   onError: (err, { id }, context) => {\n  //     queryClient.setQueryData(['todos', id], context.previousTasks)\n  //   },\n  //   // Always refetch after error or success:\n  //   onSettled: (newData, error, { id }) => {\n  //     queryClient.invalidateQueries(['todos', id])\n  //   },\n  // })\n\n  // const addTodoDeletion = useMutation({\n  //   mutationFn:  deleteFromDb,\n  //   onMutate: async (id) => {\n  //    await queryClient.cancelQueries({ queryKey: ['todos'] })\n  //    const previousTodos = queryClient.getQueryData(['todos'])\n  //   queryClient.setQueryData(['todos'], (old) =>old.filter((t) => t.id !== id) )\n  //   return { previousTodos }\n  // }})\n\n  const addTodoDeletion = useMutation(id => axios.delete(`http://localhost:8000/${id}`), {\n    onSuccess: () => {\n      queryClient.invalidateQueries('todos');\n    },\n    optimisticUpdater: (cache, id) => {\n      cache.setQueryData('todos', oldTodos => {\n        return oldTodos.filter(todo => todo.id !== id);\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [props.note.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => {\n            handleClick(item);\n          },\n          children: item.title\n        }, item._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 16\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        addTodoDeletion.mutate(props.id);\n      },\n      children: \"DELETE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(Note, \"dXKpuMkaVREVDpYZUFzM+SnQNPk=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = Note;\nexport default Note;\nvar _c;\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["React","deleteFromDb","useMutation","useQueryClient","axios","jsxDEV","_jsxDEV","Note","props","_s","handleClick","item","queryClient","addTodoDeletion","id","delete","onSuccess","invalidateQueries","optimisticUpdater","cache","setQueryData","oldTodos","filter","todo","className","children","note","map","onClick","title","_id","fileName","_jsxFileName","lineNumber","columnNumber","mutate","_c","$RefreshReg$"],"sources":["D:/TodoProject/client/src/Note.js"],"sourcesContent":["import React from \"react\";\r\nimport {deleteFromDb} from './api/DeleteToDO';\r\nimport {useMutation,useQueryClient}  from '@tanstack/react-query';\r\nimport axios from 'axios';\r\n\r\nfunction Note(props) {\r\n\r\n  function handleClick(item) {}\r\n \r\n  const queryClient = useQueryClient();\r\n  \r\n// const addTodoDeletion =  useMutation({  \r\n//    mutationFn:  deleteFromDb, \r\n//   // When mutate is called:\r\n//   onMutate: async (id) => {\r\n//     // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\r\n//     await queryClient.cancelQueries(['todos'])\r\n\r\n//     // Snapshot the previous value\r\n//     const previousTasks = queryClient.getQueryData(['todos'])\r\n\r\n//     // Optimistically update to the new value\r\n//     queryClient.setQueryData(['todos'], old => old?.filter((t) => t.id !== id))\r\n\r\n//     // Return a context object with the snapshotted value\r\n//     return { previousTasks }\r\n//   },\r\n//   // If the mutation fails, use the context returned from onMutate to roll back\r\n//   onError: (err, { id }, context) => {\r\n//     queryClient.setQueryData(['todos', id], context.previousTasks)\r\n//   },\r\n//   // Always refetch after error or success:\r\n//   onSettled: (newData, error, { id }) => {\r\n//     queryClient.invalidateQueries(['todos', id])\r\n//   },\r\n// })\r\n\r\n// const addTodoDeletion = useMutation({\r\n//   mutationFn:  deleteFromDb,\r\n//   onMutate: async (id) => {\r\n//    await queryClient.cancelQueries({ queryKey: ['todos'] })\r\n//    const previousTodos = queryClient.getQueryData(['todos'])\r\n//   queryClient.setQueryData(['todos'], (old) =>old.filter((t) => t.id !== id) )\r\n//   return { previousTodos }\r\n// }})\r\n\r\n\r\nconst addTodoDeletion = useMutation(\r\n  (id) => axios.delete(`http://localhost:8000/${id}`),\r\n  {\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries('todos');\r\n    },\r\n    optimisticUpdater: (cache, id) => {\r\n      cache.setQueryData('todos', (oldTodos) => {\r\n        return oldTodos.filter((todo) => todo.id !== id);\r\n      });\r\n    },\r\n  }\r\n);\r\n  return (\r\n    <div className=\"note\">\r\n      {  props.note.map((item) => {\r\n        return <ul> <li onClick={() => {handleClick(item)}} key={item._id}>{item.title}</li></ul>\r\n      })}\r\n      <button onClick={() => {addTodoDeletion.mutate(props.id)}}>DELETE</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Note;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,YAAY,QAAO,kBAAkB;AAC7C,SAAQC,WAAW,EAACC,cAAc,QAAQ,uBAAuB;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAEnB,SAASC,WAAWA,CAACC,IAAI,EAAE,CAAC;EAE5B,MAAMC,WAAW,GAAGT,cAAc,EAAE;;EAEtC;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,MAAMU,eAAe,GAAGX,WAAW,CAChCY,EAAE,IAAKV,KAAK,CAACW,MAAM,CAAE,yBAAwBD,EAAG,EAAC,CAAC,EACnD;IACEE,SAAS,EAAEA,CAAA,KAAM;MACfJ,WAAW,CAACK,iBAAiB,CAAC,OAAO,CAAC;IACxC,CAAC;IACDC,iBAAiB,EAAEA,CAACC,KAAK,EAAEL,EAAE,KAAK;MAChCK,KAAK,CAACC,YAAY,CAAC,OAAO,EAAGC,QAAQ,IAAK;QACxC,OAAOA,QAAQ,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACT,EAAE,KAAKA,EAAE,CAAC;MAClD,CAAC,CAAC;IACJ;EACF,CAAC,CACF;EACC,oBACER,OAAA;IAAKkB,SAAS,EAAC,MAAM;IAAAC,QAAA,GAChBjB,KAAK,CAACkB,IAAI,CAACC,GAAG,CAAEhB,IAAI,IAAK;MAC1B,oBAAOL,OAAA;QAAAmB,QAAA,GAAI,GAAC,eAAAnB,OAAA;UAAIsB,OAAO,EAAEA,CAAA,KAAM;YAAClB,WAAW,CAACC,IAAI,CAAC;UAAA,CAAE;UAAAc,QAAA,EAAiBd,IAAI,CAACkB;QAAK,GAArBlB,IAAI,CAACmB,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAmB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAC3F,CAAC,CAAC,eACF5B,OAAA;MAAQsB,OAAO,EAAEA,CAAA,KAAM;QAACf,eAAe,CAACsB,MAAM,CAAC3B,KAAK,CAACM,EAAE,CAAC;MAAA,CAAE;MAAAW,QAAA,EAAC;IAAM;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACtE;AAEV;AAACzB,EAAA,CA/DQF,IAAI;EAAA,QAISJ,cAAc,EAsCZD,WAAW;AAAA;AAAAkC,EAAA,GA1C1B7B,IAAI;AAkEb,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}